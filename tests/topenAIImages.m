classdef topenAIImages < matlab.unittest.TestCase
% Tests for openAIImages

%   Copyright 2024 The MathWorks, Inc.

    methods (TestClassSetup)
        function saveEnvVar(testCase)
            % Ensures key is not in environment variable for tests
            openAIEnvVar = "OPENAI_API_KEY";
            if isenv(openAIEnvVar)
                key = getenv(openAIEnvVar);
                testCase.addTeardown(@() setenv(openAIEnvVar, key));
                unsetenv(openAIEnvVar);
            end
        end
    end

    properties(TestParameter)
        InvalidConstructorInput = iGetInvalidConstructorInput;
        InvalidGenerateInput = iGetInvalidGenerateInput;  
        InvalidVariationInput = iGetInvalidVariationInput;
        InvalidEditInput = iGetInvalidEditInput;
    end
    
    methods(Test)
        % Test methods
        function generateAcceptsSingleStringAsInput(testCase)
            mdl = openAIImages(APIKey="this-is-not-a-real-key");
            testCase.verifyWarningFree(@()generate(mdl,"This is okay"));
            mdl = openAIImages(APIKey='this-is-not-a-real-key');
            testCase.verifyWarningFree(@()generate(mdl,'This is okay'));
        end

        function keyNotFound(testCase)
            testCase.verifyError(@()openAIImages, "llms:keyMustBeSpecified");
        end

        function promptSizeLimit(testCase)
            mdl = openAIImages(APIKey="this-is-not-a-real-key", ModelName="dall-e-2");
            testCase.verifyError(@()generate(mdl, repmat('c', 1, 1001)), "llms:promptLimitCharacter")
            testCase.verifyError(@()edit(mdl, which("peppers.png"), repmat('c', 1, 1001)), "llms:promptLimitCharacter")
            mdl = openAIImages(APIKey="this-is-not-a-real-key", ModelName="dall-e-3");
            testCase.verifyError(@()generate(mdl, repmat('c', 1, 4001)), "llms:promptLimitCharacter")
        end


        function invalidOptionsGenerate(testCase)
            mdl = openAIImages(APIKey="this-is-not-a-real-key", ModelName="dall-e-2");
            testCase.verifyError(@()generate(mdl, "cat", Quality="hd"), "llms:invalidOptionForModel")
            testCase.verifyError(@()generate(mdl, "cat", Style="natural"), "llms:invalidOptionForModel")
            testCase.verifyError(@()generate(mdl, "cat", Size="1024x1792"), "MATLAB:validators:mustBeMember")
            mdl = openAIImages(ApiKey="this-is-not-a-real-key", ModelName="dall-e-3");
            testCase.verifyError(@()generate(mdl, "cat", Size="256x256"), "MATLAB:validators:mustBeMember")
            testCase.verifyError(@()generate(mdl, "cat", NumImages=4), "llms:invalidOptionAndValueForModel")
        end

        function invalidModelEdit(testCase)
            validImage = string(which("peppers.png"));
            mdl = openAIImages(APIKey="this-is-not-a-real-key", ModelName="dall-e-3");
            testCase.verifyError(@()edit(mdl, validImage, "cat"), "llms:functionNotAvailableForModel")
        end

        function invalidModelVariation(testCase)
            validImage = string(which("peppers.png"));
            mdl = openAIImages(APIKey="this-is-not-a-real-key", ModelName="dall-e-3");
            testCase.verifyError(@()createVariation(mdl, validImage), ...
                "llms:functionNotAvailableForModel")
        end

        function generateWithAllNVP(testCase)
            mdl = openAIImages(APIKey="this-is-not-a-real-key", ModelName="dall-e-3");
            testCase.verifyWarningFree(@()generate(mdl, ...
                "prompt", ...
                Quality="hd", ...
                Style="vivid",...
                Size="1792x1024",...
                NumImages=1))
        end

        function editWithAllNVP(testCase)
            validImage = string(which("peppers.png"));
            mdl = openAIImages(APIKey="this-is-not-a-real-key", ModelName="dall-e-2");
            testCase.verifyWarningFree(@()edit(mdl, ...
                validImage,...
                "prompt", ...
                MaskImagePath = validImage, ...
                Size="512x512",...
                NumImages=3))
        end

        function variationWithAllNVP(testCase)
            validImage = string(which("peppers.png"));
            mdl = openAIImages(APIKey="this-is-not-a-real-key", ModelName="dall-e-2");
            testCase.verifyWarningFree(@()createVariation(mdl, ...
                validImage,...
                Size="512x512",...
                NumImages=3))
        end

        function constructModelWithAllNVP(testCase)
            modelName = "dall-e-2";
            apiKey = "this-is-not-a-real-key";
            timeout = 3;
            mdl = openAIImages(ModelName=modelName, APIKey=apiKey, TimeOut=timeout);
            testCase.verifyEqual(mdl.ModelName, modelName);
        end

        function fakePNGImage(testCase)
            mdl = openAIImages(APIKey="this-is-not-a-real-key");
            fakePng = fullfile("test_files", "solar.png");
            testCase.verifyError(@()edit(mdl,fakePng, "bla"), "llms:pngExpected");
        end

        function invalidInputsConstructor(testCase, InvalidConstructorInput)
            testCase.verifyError(@()openAIImages(InvalidConstructorInput.Input{:}), InvalidConstructorInput.Error);
        end

        function invalidInputsGenerate(testCase, InvalidGenerateInput)
            mdl = openAIImages(APIKey="this-is-not-a-real-key");
            testCase.verifyError(@()generate(mdl,InvalidGenerateInput.Input{:}), InvalidGenerateInput.Error);
        end

        function invalidInputsEdit(testCase, InvalidEditInput)
            mdl = openAIImages(APIKey="this-is-not-a-real-key");
            testCase.verifyError(@()edit(mdl,InvalidEditInput.Input{:}), InvalidEditInput.Error);
        end

        function invalidInputsVariation(testCase, InvalidVariationInput)
            mdl = openAIImages(APIKey="this-is-not-a-real-key");
            testCase.verifyError(@()createVariation(mdl,InvalidVariationInput.Input{:}), InvalidVariationInput.Error);
        end

        function testThatImageIsReturned(testCase)
            mdl = openAIImages(APIKey=getenv("OPENAI_KEY"));

            [images, response] = generate(mdl, ...
                "Create a 3D avatar of a whimsical sushi on the beach. " + ...
                "He is decorated with various sushi elements and is " + ...
                "playfully interacting with the beach environment.");

            testCase.verifySize(images{:}, [1024, 1024, 3]);
            testCase.verifyEqual(response.StatusLine.ReasonPhrase, "OK");
        end
    end    
end

function invalidConstructorInput = iGetInvalidConstructorInput
invalidConstructorInput = struct( ...
    "InvalidTimeOutType", struct( ...
        "Input",{{"TimeOut", "2" }},...
        "Error", "MATLAB:validators:mustBeReal"), ...
    ...
    "InvalidTimeOutSize", struct( ...
        "Input",{{"TimeOut", [1 1 1] }},...
        "Error", "MATLAB:validation:IncompatibleSize"), ...
    ...
    "InvalidModelNameSize",struct( ...
        "Input",{{ "ModelName", ["dall-e-2","dall-e-2"] }},...
        "Error","MATLAB:validation:IncompatibleSize"),...
    ...
    "InvalidModelNameOption",struct( ...
        "Input",{{ "ModelName", "gpt" }},...
        "Error","MATLAB:validators:mustBeMember"),...
    ...
    "InvalidApiKeyType",struct( ...
        "Input",{{ "APIKey" 123 }},...
        "Error","MATLAB:validators:mustBeNonzeroLengthText"),...
    ...
    "InvalidApiKeySize",struct( ...
        "Input",{{ "APIKey" ["abc" "abc"] }},...
        "Error","MATLAB:validators:mustBeTextScalar"));
end

function invalidGenerateInput = iGetInvalidGenerateInput
invalidGenerateInput = struct( ...
        "EmptyInput",struct( ...
            "Input",{{ [] }},...
            "Error","MATLAB:validators:mustBeNonzeroLengthText"),...
        ...
        "InvalidInputType",struct( ...
            "Input",{{ 123 }},...
            "Error","MATLAB:validators:mustBeNonzeroLengthText"),...
        ...
         "InvalidPromptLen",struct( ...
            "Input",{{ "" }},...
            "Error","MATLAB:validators:mustBeNonzeroLengthText"),...
        ...
        "InvalidNumImagesType",struct( ...
            "Input",{{ "prompt"  "NumImages" "2" }},...
            "Error","MATLAB:validators:mustBeNumericOrLogical"),...
        ...
        "LargeValueForNumImages",struct( ...
            "Input",{{ "prompt", "NumImages", 20 }},...
            "Error","MATLAB:validators:mustBeLessThanOrEqual"),...
        ...
        "InvalidNumImagesValue",struct( ...
            "Input",{{ "prompt"  "NumImages" 0 }},...
            "Error","MATLAB:validators:mustBePositive"), ...
        ...
        "InvalidSizeOption",struct( ...
            "Input",{{ "prompt" "Size" "foo" }},...
            "Error","MATLAB:validators:mustBeMember"),...
        ...
        "InvalidSizeForModel",struct( ...
            "Input",{{ "prompt" "Size" "1792x1024" }},...
            "Error","MATLAB:validators:mustBeMember"),...
        ...
        "InvalidQualityOption",struct( ...
            "Input",{{ "prompt" "Quality" "foo" }},...
            "Error","MATLAB:validators:mustBeMember"),...
        ...
        "InvalidStyleOption",struct( ...
            "Input",{{ "prompt" "Style" "foo" }},...
            "Error","MATLAB:validators:mustBeMember"));
end

function invalidVariationInput = iGetInvalidVariationInput
validImage = which("peppers.png");
nonPNGImage = which("corn.tif");
invalidVariationInput = struct( ...
        "EmptyImage",struct( ...
            "Input",{{ []}},...
            "Error","MATLAB:validators:mustBeNonzeroLengthText"),...
        ...
        "InvalidImageType",struct( ...
            "Input",{{ 123 }},...
            "Error","MATLAB:validators:mustBeNonzeroLengthText"),...
        ...
        "InvalidImageExtension",struct( ...
            "Input",{{ nonPNGImage }},...
            "Error","llms:pngExpected"),...
        ...
        "InvalidNumImagesType",struct( ...
            "Input",{{ validImage,"NumImages", "2" }},...
            "Error","MATLAB:validators:mustBeNumericOrLogical"),...
        ...
        "LargeValueForNumImages",struct( ...
            "Input",{{ validImage, "NumImages", 20 }},...
            "Error","MATLAB:validators:mustBeLessThanOrEqual"),...
        ...
        "InvalidNumImagesValue",struct( ...
            "Input",{{ validImage,"NumImages", 0 }},...
            "Error","MATLAB:validators:mustBePositive"), ...
        ...
        "InvalidSizeOption",struct( ...
            "Input",{{ validImage,"Size", "foo" }},...
            "Error","MATLAB:validators:mustBeMember"));
end

function invalidEditInput = iGetInvalidEditInput
validImage = string(which("peppers.png"));
nonPNGImage = string(which("corn.tif"));
invalidEditInput = struct( ...
        "EmptyImage",struct( ...
            "Input",{{ [], "prompt" }},...
            "Error","MATLAB:validators:mustBeNonzeroLengthText"),...
        ...
        "InvalidImageType",struct( ...
            "Input",{{ 123, "prompt" }},...
            "Error","MATLAB:validators:mustBeNonzeroLengthText"),...
        ...
        "InvalidPromptLen",struct( ...
            "Input",{{ validImage, "" }},...
            "Error","MATLAB:validators:mustBeNonzeroLengthText"),...
        ...
        "InvalidImageExtension",struct( ...
            "Input",{{ nonPNGImage, "prompt" }},...
            "Error","llms:pngExpected"),...
        ...
        "EmptyPrompt",struct( ...
            "Input",{{ validImage, [] }},...
            "Error","MATLAB:validators:mustBeNonzeroLengthText"),...
        ...
        "InvalidPromptType",struct( ...
            "Input",{{ validImage, 123 }},...
            "Error","MATLAB:validators:mustBeNonzeroLengthText"),...
        ...
        "InvalidMaskImage",struct( ...
            "Input",{{ validImage, "foo", "MaskImagePath", 123 }},...
            "Error","MATLAB:validators:mustBeNonzeroLengthText"),...
        ...
        "InvalidNumImagesType",struct( ...
            "Input",{{ validImage,"prompt", "NumImages", "2" }},...
            "Error","MATLAB:validators:mustBeNumericOrLogical"),...
        ...
        "LargeValueForNumImages",struct( ...
            "Input",{{ validImage, "prompt", "NumImages", 20 }},...
            "Error","MATLAB:validators:mustBeLessThanOrEqual"),...
        ...
        "InvalidNumImagesValue",struct( ...
            "Input",{{ validImage,"prompt", "NumImages", 0 }},...
            "Error","MATLAB:validators:mustBePositive"), ...
        ...
        "InvalidSizeOption",struct( ...
            "Input",{{ validImage,"prompt", "Size", "foo" }},...
            "Error","MATLAB:validators:mustBeMember"));
end